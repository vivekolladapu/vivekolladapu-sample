name: CI/CD Pipeline with Terraform and GitHub Secrets

on:
  workflow_dispatch:  # Allows triggering manually

jobs:
  # Job 1: Terraform Infrastructure Deployment
  terraform:
    name: Deploy Infrastructure and Update GitHub Secrets
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Terraform Init
      - name: Terraform Init
        working-directory: "./part4 2/scripts/terraform"
        run: terraform init -upgrade

      # Terraform Plan
      - name: Terraform Plan
        working-directory: "./part4 2/scripts/terraform"
        run: terraform plan -var="app_name=${{ secrets.APP_NAME }}" \
                            -var="kubernetes_version=${{ secrets.KUBERNETES_VERSION }}" \
                            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
                            -var="client_id=${{ secrets.ARM_CLIENT_ID }}" \
                            -var="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" \
                            -var="tenant_id=${{ secrets.ARM_TENANT_ID }}"

      # Terraform Apply
      - name: Terraform Apply
        working-directory: "./part4 2/scripts/terraform"
        run: terraform apply -auto-approve -var="app_name=${{ secrets.APP_NAME }}" \
                             -var="kubernetes_version=${{ secrets.KUBERNETES_VERSION }}" \
                             -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
                             -var="client_id=${{ secrets.ARM_CLIENT_ID }}" \
                             -var="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" \
                             -var="tenant_id=${{ secrets.ARM_TENANT_ID }}"

      # Capture Terraform outputs and set them as environment variables
      - name: Get Terraform Outputs
        id: get_outputs
        working-directory: "./part4 2/scripts/terraform"
        run: |
          echo "acr_login_url=$(terraform output -raw container_registry)" >> $GITHUB_ENV
          echo "acr_username=$(terraform output -raw registry_username)" >> $GITHUB_ENV
          echo "acr_password=$(terraform output -raw registry_password)" >> $GITHUB_ENV
          echo "aks_kubeconfig=$(terraform output -raw kube_config)" >> $GITHUB_ENV

      # Install GitHub CLI
      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      # Authenticate GitHub CLI
      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.SECRETS_MODIFY_TOKEN }}" | gh auth login --with-token

      # Create or Update GitHub Secrets
      - name: Create GitHub Secrets
        run: |
          echo "Creating or updating secrets in GitHub repository"
          gh secret set CONTAINER_REGISTRY -b"${{ env.acr_login_url }}"
          gh secret set REGISTRY_UN -b"${{ env.acr_username }}"
          gh secret set REGISTRY_PW -b"${{ env.acr_password }}"
          gh secret set KUBE_CONFIG -b"${{ env.aks_kubeconfig }}"
