name: CI/CD Pipeline

on:
  push:
    branches:
      - master
    paths:
      - book_catalog/**
      - inventory_management/**
      - scripts/terraform/**
  workflow_dispatch: # Allows triggering manually

    inputs:
      version:
        description: 'Enter the version to tag the Docker image'
        required: true
        default: 'latest'

jobs:
  # Job 1: Terraform Infrastructure Deployment
  terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: "part4 2/scripts/terraform"

      # Terraform Plan
      - name: Terraform Plan
        run: terraform plan -var="app_name=${{ secrets.APP_NAME }}" -var="kubernetes_version=${{ secrets.KUBERNETES_VERSION }}" -var="subscription_id=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" -var="client_id=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" -var="client_secret=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" -var="tenant_id=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}"
        working-directory: "part4 2/scripts/terraform"

      # Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve -var="app_name=${{ secrets.APP_NAME }}" -var="kubernetes_version=${{ secrets.KUBERNETES_VERSION }}" -var="subscription_id=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" -var="client_id=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" -var="client_secret=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" -var="tenant_id=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}"
        working-directory: "part4 2/scripts/terraform"

      # Capture Terraform outputs and set them as environment variables
      - name: Get Terraform Outputs
        id: terraform_outputs
        run: |
          echo "acr_login_url=$(terraform output -raw container_registry)" >> $GITHUB_ENV
          echo "acr_username=$(terraform output -raw registry_username)" >> $GITHUB_ENV
          echo "acr_password=$(terraform output -raw registry_password)" >> $GITHUB_ENV
          echo "aks_kubeconfig=$(terraform output -raw kube_config)" >> $GITHUB_ENV
        working-directory: "part4 2/scripts/terraform"

      # Install GitHub CLI
      - name: Install GitHub CLI
        run: sudo apt-get install gh

      # Authenticate GitHub CLI
      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.SECRETS_MODIFY_TOKEN }}" | gh auth login --with-token
      # Create or update GitHub secrets
      - name: Create GitHub Secrets
        run: |
          echo "Creating or updating secrets in GitHub repository"
          gh secret set CONTAINER_REGISTRY -b "${{ env.acr_login_url }}"
          gh secret set REGISTRY_UN -b "${{ env.acr_username }}"
          gh secret set REGISTRY_PW -b "${{ env.acr_password }}"
          gh secret set KUBE_CONFIG -b "${{ env.aks_kubeconfig }}"
  # Job 2: Deploy Book Catalog Microservice
  deploy_book_catalog:
    name: Deploy book_catalog
    runs-on: ubuntu-latest
    needs: terraform  # Ensure this job waits for Terraform to complete

    env:
      VERSION: ${{ github.sha }}
      CONTAINER_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
      REGISTRY_UN: ${{ secrets.REGISTRY_UN }}
      REGISTRY_PW: ${{ secrets.REGISTRY_PW }}
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      NAME: book_catalog
      DIRECTORY: book_catalog

    steps:
      # Checkout code
      - uses: actions/checkout@v3

      # Set executable permissions for all scripts
      - name: Set permissions for build, push, deploy scripts
        run: |
          chmod +x ./scripts/build-image.sh
          chmod +x ./scripts/push-image.sh
          chmod +x ./scripts/deploy.sh
      # Build the Docker image
      - name: Build Docker image
        run: ./scripts/build-image.sh

      # Push the Docker image to the container registry
      - name: Publish Docker image
        run: ./scripts/push-image.sh

  # Job 3: Deploy Inventory Management Microservice
  deploy_inventory_management:
    name: Deploy inventory_management
    runs-on: ubuntu-latest
    needs: terraform  # Ensure this job waits for Terraform to complete

    env:
      VERSION: ${{ github.sha }}
      CONTAINER_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
      REGISTRY_UN: ${{ secrets.REGISTRY_UN }}
      REGISTRY_PW: ${{ secrets.REGISTRY_PW }}
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      NAME: inventory_management
      DIRECTORY: inventory_management

    steps:
      # Checkout code
      - uses: actions/checkout@v3

      # Set executable permissions for all scripts
      - name: Set permissions for build, push, deploy scripts
        run: |
          chmod +x ./scripts/build-image.sh
          chmod +x ./scripts/push-image.sh
          chmod +x ./scripts/deploy.sh
      # Build the Docker image
      - name: Build Docker image
        run: ./scripts/build-image.sh

      # Push the Docker image to the container registry
      - name: Publish Docker image
        run: ./scripts/push-image.sh

      # Install Kubectl and deploy to Kubernetes
      - uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}
          kubectl-version: v1.24.2

      # Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: ./scripts/deploy.sh
